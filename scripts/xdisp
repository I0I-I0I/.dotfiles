#!/usr/bin/env bash

set -euo pipefail

displays=($(xrandr --query | grep " connected" | awk '{print $1}'))
main_display="$(xrandr --query | awk '/ connected primary/ {print $1}')"
if [[ -z "$main_display" ]]; then
    main_display="${displays[0]}"
fi

if [ "${#displays[@]}" -lt 1 ]; then
    echo "Error: No connected displays detected."
    exit 1
fi

echo "Displays detected: ${displays[*]}"

list() {
    echo "Connected displays:"
    xrandr --query | grep --color=never " connected"
}

mirror() {
    if [ "${#displays[@]}" -lt 2 ]; then
        echo "‚ùå Error: At least two displays required to mirror."
        exit 1
    fi
    echo "Mirroring all displays to $main_display"
    for d in "${displays[@]}"; do
        if [ "$d" != "$main_display" ]; then
            xrandr --output "$d" --same-as "$main_display"
        fi
    done
}

extend() {
    local direction="${1:-right}"
    if [ "${#displays[@]}" -lt 2 ]; then
        echo "‚ùå Error: At least two displays required to extend."
        exit 1
    fi
    echo "Extending displays ($direction chain)"
    xrandr --output "$main_display" --auto --primary
    prev="$main_display"
    for d in "${displays[@]}"; do
        if [ "$d" != "$main_display" ]; then
            xrandr --output "$d" --auto --${direction}-of "$prev"
            prev="$d"
        fi
    done
}

rotate_disp() {
    local disp="$1"
    local orientation="${2:-normal}"
    if ! [[ " ${displays[*]} " =~ " $disp " ]]; then
        echo "‚ùå Error: Display '$disp' not found."
        exit 1
    fi
    case "$orientation" in
        normal|left|right|inverted)
            echo "Rotating $disp to $orientation"
            xrandr --output "$disp" --rotate "$orientation"
            ;;
        *)
            echo "‚ùå Invalid orientation: $orientation"
            echo "Valid: normal, left, right, inverted"
            exit 1
            ;;
    esac
}

swap() {
    if [ "${#displays[@]}" -lt 2 ]; then
        echo "Error: At least two displays required to swap."
        exit 1
    fi
    local next=""
    for d in "${displays[@]}"; do
        if [ "$d" != "$main_display" ]; then
            next="$d"
            break
        fi
    done
    echo "üîÄ Swapping primary from $main_display to $next"
    xrandr --output "$main_display" --auto --noprimary
    xrandr --output "$next" --auto --primary
    main_display="$next"
}

off() {
    local disp="$1"
    if ! [[ " ${displays[*]} " =~ " $disp " ]]; then
        echo "‚ùå Error: Display '$disp' not connected."
        exit 1
    fi
    echo "Turning off $disp"
    xrandr --output "$disp" --off
}

only() {
    local target="$1"
    if ! [[ " ${displays[*]} " =~ " $target " ]]; then
        echo "‚ùå Error: Display '$target' not connected."
        exit 1
    fi
    echo "üñ•Ô∏è Using only $target"
    for d in "${displays[@]}"; do
        if [ "$d" != "$target" ]; then
            xrandr --output "$d" --off
        fi
    done
    xrandr --output "$target" --auto --primary
    main_display="$target"
}

apply_profile() {
    local prof="$1"
    local script="${HOME}/.config/monitor-profiles/$prof.sh"
    if [ ! -x "$script" ]; then
        echo "‚ùå Error: Profile '$prof' not found or not executable."
        echo "Available profiles:"
        ls ~/.config/monitor-profiles/ | sed 's/\.sh$//' || true
        exit 1
    fi
    echo "Applying profile '$prof'"
    "$script"
}

show_help() {
    cat <<EOF
Usage: $0 <mode> [options]

Modes:
  list               List connected displays
  mirror             Mirror all displays to primary
  extend [dir]       Extend chain (dir: right|left)
  rotate <disp> [o]  Rotate display (o: normal|left|right|inverted)
  swap               Swap primary to next display
  off <disp>         Turn off specified display
  only <disp>        Use only specified display
  profile <name>     Apply a saved profile
  help               Show this help message

Examples:
  $0 list
  $0 mirror
  $0 extend left
  $0 rotate HDMI-1 left
  $0 swap
  $0 off DP-2
  $0 only eDP-1
  $0 profile home_setup
EOF
}

# Main dispatcher
case "${1:-}" in
    list)   list ;;
    mirror) mirror ;;
    extend) extend "$2" ;;
    rotate) rotate_disp "$2" "${3:-}" ;;
    swap)   swap ;;
    off)    off "$2" ;;
    only)   only "$2" ;;
    profile) apply_profile "$2" ;;
    help|-h|--help) show_help ;;
    "")
        echo "No mode specified. Defaulting to extend right"
        extend right
        ;;
    *)
        echo "Invalid mode: $1"
        show_help
        exit 1
        ;;
esac
