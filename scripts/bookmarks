#!/bin/sh
set -eu

BOOKMARKS_FILE="${BOOKMARKS_FILE:-$HOME/Sync/notes/bookmarks.txt}"
ROFI="rofi -dmenu -p 'Bookmarks:'"
ROFI_ADD="rofi -dmenu -p 'Add bookmark (label :: url or url):'"
ROFI_REMOVE="rofi -dmenu -p 'Remove bookmark:'"
ROFI_EDIT="rofi -dmenu -p 'Edit bookmark (new: label :: url or url):'"

BROWSER="$(command -v zen || command -v zen-browser || command -v firefox || command -v brave || true)"
FALLBACK="$(command -v xdg-open || command -v firefox || true)"

mkdir -p "$(dirname "$BOOKMARKS_FILE")"
if [ ! -f "$BOOKMARKS_FILE" ]; then
  cat >"$BOOKMARKS_FILE" <<'EOF'
# personal
tonybtw :: https://tonybtw.com
https://youtube.com
# work
[docs] NixOS Manual :: https://nixos.org/manual/
EOF
fi

emit() {
  file="$1"
  [ -f "$file" ] || return 0
  grep -vE '^\s*(#|$)' "$file" | while IFS= read -r line; do
    case "$line" in
      *"::"*)
        lhs="${line%%::*}"; rhs="${line#*::}"
        lhs="$(printf '%s' "$lhs" | sed 's/[[:space:]]*$//')"
        rhs="$(printf '%s' "$rhs" | sed 's/^[[:space:]]*//')"
        printf '%s :: %s\n' "$lhs" "$rhs"
        ;;
      *)
        printf '%s :: %s\n' "$line" "$line"
        ;;
    esac
  done
}

trim() {
  printf '%s' "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

exists_in_file() {
  target="$1"
  awk -v target="$target" '
    function trim(s){ gsub(/^[ \t]+|[ \t]+$/,"",s); return s }
    {
      if ($0 ~ /^[[:space:]]*#/ || $0 ~ /^[[:space:]]*$/) { next }
      pos = index($0, "::")
      if (pos > 0) {
        rhs = substr($0, pos + 2)
        key = trim(rhs)
      } else {
        key = trim($0)
      }
      if (key == target) { found = 1; exit }
    }
    END { if (found) exit 0; else exit 1 }
  ' "$BOOKMARKS_FILE"
}

do_add() {
  if [ $# -ge 2 ]; then
    label="$1"; url="$2"; entry="$(trim "$label") :: $(trim "$url")"
  elif [ $# -eq 1 ]; then
    input="$1"
    if printf '%s' "$input" | grep -q '::'; then
      entry="$(trim "$input")"
    else
      last="$(printf '%s' "$input" | awk '{print $NF}')"
      rest="$(printf '%s' "$input" | awk '{$NF=""; sub(/[[:space:]]+$/, ""); print}')"
      if printf '%s' "$last" | grep -Eq '://|^\w+\.[a-z]{2,}' && [ -n "$rest" ]; then
        entry="$(trim "$rest") :: $(trim "$last")"
      else
        entry="$(trim "$input")"
      fi
    fi
  else
    input="$(emit "$BOOKMARKS_FILE" | eval "$ROFI_ADD" || true)"
    [ -n "$input" ] || { echo "No input; aborting add." >&2; return 0; }
    if printf '%s' "$input" | grep -q '::'; then
      entry="$(trim "$input")"
    else
      last="$(printf '%s' "$input" | awk '{print $NF}')"
      rest="$(printf '%s' "$input" | awk '{$NF=""; sub(/[[:space:]]+$/, ""); print}')"
      if printf '%s' "$last" | grep -Eq '://|^\w+\.[a-z]{2,}' && [ -n "$rest" ]; then
        entry="$(trim "$rest") :: $(trim "$last")"
      else
        entry="$(trim "$input")"
      fi
    fi
  fi

  if printf '%s' "$entry" | grep -q '::'; then
    rhs="$(printf '%s' "$entry" | sed 's/^[^:]*:://')"
    target="$(trim "$rhs")"
  else
    target="$(trim "$entry")"
  fi

  if exists_in_file "$target"; then
    printf 'Entry with target "%s" already exists in %s\n' "$target" "$BOOKMARKS_FILE" >&2
    return 0
  fi

  tmp="$(mktemp "${BOOKMARKS_FILE}.XXXX")"
  printf '%s\n' "$entry" >>"$tmp"
  cat "$tmp" >> "$BOOKMARKS_FILE"
  rm -f "$tmp"
  printf 'Added: %s\n' "$entry"
}

do_remove() {
  if [ $# -ge 1 ]; then
    target="$1"
  else
    choice="$(emit "$BOOKMARKS_FILE" | sort | eval "$ROFI_REMOVE" || true)"
    [ -n "$choice" ] || { echo "No selection; aborting remove." >&2; return 0; }
    target="${choice##* :: }"
  fi

  # normalize and strip inline comments from the chosen target
  target="$(trim "$target")"
  target="$(printf '%s' "$target" | sed -e 's/[[:space:]]\+#.*$//' -e 's/[[:space:]]\/\/.*$//' -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"

  # safety backup
  cp "$BOOKMARKS_FILE" "${BOOKMARKS_FILE}.bak" || true

  # produce a new file skipping lines where trimmed RHS (or whole line) equals target
  awk -v target="$target" '
    function trim(s){ gsub(/^[ \t]+|[ \t]+$/,"",s); return s }
    {
      if ($0 ~ /^[[:space:]]*#/ || $0 ~ /^[[:space:]]*$/) { print; next }
      pos = index($0, "::")
      if (pos > 0) {
        rhs = substr($0, pos + 2)
        key = trim(rhs)
      } else {
        key = trim($0)
      }
      if (key == target) {
        # skip this matching bookmark
        next
      } else {
        print
      }
    }
  ' "$BOOKMARKS_FILE" > "${BOOKMARKS_FILE}.tmp" && mv "${BOOKMARKS_FILE}.tmp" "$BOOKMARKS_FILE"

  printf 'Removed entries matching: %s\n' "$target"
}

do_edit() {
  choice="$(emit "$BOOKMARKS_FILE" | sort | eval "$ROFI_REMOVE" || true)"
  [ -n "$choice" ] || { echo "No selection; aborting edit." >&2; return 0; }
  current_line="$choice"
  target="${current_line##* :: }"
  target="$(trim "$target")"

  # prefill current entry into the edit prompt
  new="$(printf '%s' "$current_line" | eval "$ROFI_EDIT" || true)"
  [ -n "$new" ] || { echo "No input; aborting edit." >&2; return 0; }

  if printf '%s' "$new" | grep -q '::'; then
    new_entry="$(trim "$new")"
  else
    last="$(printf '%s' "$new" | awk '{print $NF}')"
    rest="$(printf '%s' "$new" | awk '{$NF=""; sub(/[[:space:]]+$/, ""); print}')"
    if printf '%s' "$last" | grep -Eq '://|^\w+\.[a-z]{2,}' && [ -n "$rest" ]; then
      new_entry="$(trim "$rest") :: $(trim "$last")"
    else
      new_entry="$(trim "$new")"
    fi
  fi

  cp "$BOOKMARKS_FILE" "${BOOKMARKS_FILE}.bak" || true
  awk -v target="$target" -v new_entry="$new_entry" '
    function trim(s){ gsub(/^[ \t]+|[ \t]+$/,"",s); return s }
    BEGIN { replaced = 0 }
    {
      if ($0 ~ /^[[:space:]]*#/ || $0 ~ /^[[:space:]]*$/) { print; next }
      pos = index($0, "::")
      if (pos > 0) {
        rhs = substr($0, pos + 2)
        key = trim(rhs)
      } else {
        key = trim($0)
      }
      if (key == target && replaced == 0) {
        print new_entry
        replaced = 1
      } else {
        print
      }
    }
  ' "$BOOKMARKS_FILE" > "${BOOKMARKS_FILE}.tmp" && mv "${BOOKMARKS_FILE}.tmp" "$BOOKMARKS_FILE"

  printf 'Edited: %s -> %s\n' "$current_line" "$new_entry"
}

open_cmd() {
  if [ -n "$BROWSER" ] && [ -x "$BROWSER" ]; then
    bn="$(basename "$BROWSER")"
    case "$bn" in
      xdg-open|gio) nohup "$BROWSER" "$url" >/dev/null 2>&1 & ;;
      *) nohup "$BROWSER" --new-tab "$url" >/dev/null 2>&1 & ;;
    esac
    exit 0
  fi
  if [ -n "$FALLBACK" ] && [ -x "$FALLBACK" ]; then
    nohup "$FALLBACK" "$url" >/dev/null 2>&1 &
    exit 0
  fi
  if command -v open >/dev/null 2>&1; then
    nohup open "$url" >/dev/null 2>&1 &
    exit 0
  fi
  printf 'No browser found to open %s\n' "$url" >&2
  exit 1
}

build_menu_and_choose() {
  printf '%s\n' "[+] add bookmark" "[-] remove bookmark" "[~] edit bookmark"
  emit "$BOOKMARKS_FILE" | sort
}

case "${1-}" in
  add)
    shift || true
    do_add "$@"
    exit 0
    ;;
  remove|rm)
    shift || true
    do_remove "$@"
    exit 0
    ;;
  help|-h|--help)
    cat <<EOF
Usage: $(basename "$0") [command]

No command (default): show bookmarks + actions in rofi; pick a bookmark to open
or pick an action (Add / Remove / Edit).
Commands:
  add [label] [url]      add bookmark. If no args, opens rofi prompt.
  remove|rm [url]        remove bookmark by url. If no arg, choose via rofi.
  help                   Show this help.
EOF
    exit 0
    ;;
esac

choice="$(build_menu_and_choose | eval "$ROFI" || true)"
[ -n "$choice" ] || exit 0

case "$choice" in
  "[+] add bookmark"|"[+] add bookmark "*)
    do_add
    exit 0
    ;;
  "[-] remove bookmark"|"[-] remove bookmark "*)
    do_remove
    exit 0
    ;;
  "[~] edit bookmark"|"[~] edit bookmark "*)
    do_edit
    exit 0
    ;;
esac

raw="${choice##* :: }"
raw="$(printf '%s' "$raw" \
  | sed -e 's/[[:space:]]\+#.*$//' -e 's/[[:space:]]\/\/.*$//' \
        -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"

case "$raw" in
  http://*|https://*|file://*|about:*|chrome:*) url="$raw" ;;
  *) url="https://$raw" ;;
esac

open_cmd
