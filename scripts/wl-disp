#!/usr/bin/env bash

set -euo pipefail

outputs_json=$(wlr-randr --json)
mapfile -t outputs < <(
    jq -r '.[] | select(.enabled==true) | .name' <<<"$outputs_json"
)
primary=$(jq -r '.[] | select(.primary==true) | .name' <<<"$outputs_json")

if [[ -z "$primary" ]]; then
    primary="${outputs[0]:-}"
fi

if [ "${#outputs[@]}" -lt 1 ]; then
    echo "Error: No active Wayland outputs detected."
    exit 1
fi

echo ${outputs[*]}

outputs_order=("$primary")

for o in "${outputs[@]}"; do
    [[ "$o" == "$primary" ]] && continue
    outputs_order+=("$o")
done

echo "Active outputs: ${outputs_order[*]}"

list() {
    wlr-randr | awk '/\S/ {print}'
}

get() {
    case "$1" in
    primary) echo "Primary monitor: $primary" ;;
    *) wlr-randr --json | jq -r '.[] | select(.name=="'"$1"'" and .enabled==true) | .name' ;;
    esac
}

mirror() {
    if [ "${#outputs_order[@]}" -lt 2 ]; then
        echo "Error: At least two outputs required to mirror."
        exit 1
    fi
    echo "Mirroring all outputs to $primary"
    # Use primary's mode for all
    read -r pw ph <<<$(jq -r '.[] | select(.name=="'"$primary"'" and .enabled==true) | "\(.width) \(.height)"' <<<"$outputs_json")
    for o in "${outputs_order[@]}"; do
        if ([ "$o" == "$primary" ]); then
            continue
        fi
        wl-mirror --fullscreen --fullscreen-output "$primary" "$o"
    done
}

extend() {
    direction=${1:-horizontal}
    if [ "${#outputs_order[@]}" -lt 2 ]; then
        echo "Error: At least two outputs required to extend."
        exit 1
    fi
    echo "Extending outputs (direction: $direction)"
    declare -A widths heights
    while read -r name mode; do
        w=${mode%x*}
        h=${mode#*x}
        widths["$name"]=$w
        heights["$name"]=$h
    done < <(
        jq -r '.[] | select(.enabled==true) | "\(.name) \(.width)x\(.height)"' <<<"$outputs_json"
    )
    x=0
    y=0
    for o in "${outputs_order[@]}"; do
        wlr-randr --output "$o" --mode "${widths[$o]}x${heights[$o]}" --pos $x $y --primary $([ "$o" == "$primary" ] && echo primary)
        if [ "$direction" == "horizontal" ]; then
            x=$((x + widths[$o]))
        else
            y=$((y + heights[$o]))
        fi
    done
}

rotate_disp() {
    local disp="$1" orientation="${2:-normal}"
    case "$orientation" in
    normal | left | right | inverted | top)
        echo "Rotating $disp to $orientation"
        case "$orientation" in
        normal) orien="normal" ;;
        left) orien="90" ;;
        top) orien="180" ;;
        right) orien="270" ;;
        inverted) orien="flipped" ;;
        *)
            echo "Invalid orientation: $orientation"
            exit 1
            ;;
        esac
        wlr-randr --output "$disp" --transform "$orien"
        ;;
    *)
        echo "Invalid orientation: $orientation"
        echo "Valid: normal, left, right, inverted"
        exit 1
        ;;
    esac
}

swap() {
    if [ "${#outputs_order[@]}" -lt 2 ]; then
        echo "Error: At least two outputs required to swap."
        exit 1
    fi
    next=${outputs_order[1]}
    echo "Swapping primary to $next"
    primary="$next"
    wlr-randr --output "$primary" --primary
}

off() {
    local disp="$1"
    echo "Turning off $disp"
    wlr-randr --output "$disp" --off
}

on() {
    local disp="$1"
    echo "Turning on $disp"
    wlr-randr --output "$disp" --on
}

only() {
    local target="$1"
    echo "Using only $target"
    for o in "${outputs_order[@]}"; do
        if [ "$o" != "$target" ]; then
            wlr-randr --output "$o" --off
        fi
    done
    wlr-randr --output "$target" --primary
    primary="$target"
}

apply_profile() {
    local prof="$1" script="${HOME}/.config/monitor-profiles/$prof.sh"
    if [ ! -x "$script" ]; then
        echo "Error: Profile '$prof' not found or not executable."
        echo "Available profiles:"
        ls ~/.config/monitor-profiles/ | sed 's/\.sh$//' || true
        exit 1
    fi
    echo "Applying profile '$prof'"
    "$script"
}

show_help() {
    cat <<EOF
    Usage: $0 <mode> [options]
    Modes:
    list               List active outputs
    mirror             Mirror all outputs to primary
    extend [h|v]       Extend horizontally (h) or vertically (v)
    rotate <out> [o]   Rotate output (o: normal|left|right|inverted)
    swap               Swap primary to next output
    off <out>          Turn off specified output
    only <out>         Use only specified output
    profile <name>     Apply a saved profile
    help               Show this help message
EOF
}

case "${1:-}" in
list) list ;;
mirror) mirror ;;
extend) extend "${2:-h}" ;;
rotate) rotate_disp "$2" "${3:-}" ;;
swap) swap ;;
off) off "$2" ;;
on) on "$2" ;;
only) only "$2" ;;
profile) apply_profile "$2" ;;
get) get "$2" ;;
help | -h | --help) show_help ;;
"")
    extend h
    ;;
*)
    echo "Invalid mode: $1"
    show_help
    exit 1
    ;;
esac
